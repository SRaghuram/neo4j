Feature "AggregationAcceptance": Scenario "Aggregates ordered by arithmetics"
Feature "AggregationAcceptance": Scenario "Aggregates with arithmetics"
Feature "AggregationAcceptance": Scenario "Aggregation of named paths"
Feature "AggregationAcceptance": Scenario "Aggregation with `min()`"
Feature "AggregationAcceptance": Scenario "Collect distinct nulls"
Feature "AggregationAcceptance": Scenario "Collect distinct values mixed with nulls"
Feature "AggregationAcceptance": Scenario "Distinct on null"
Feature "AggregationAcceptance": Scenario "Distinct on unbound node"
Feature "AggregationAcceptance": Scenario "Handle aggregation on functions"
Feature "AggregationAcceptance": Scenario "Handle subexpression in aggregation also occurring as standalone expression with nested aggregation in a literal map"
Feature "AggregationAcceptance": Scenario "Projection during aggregation in WITH before MERGE and after WITH with predicate"
Feature "AggregationAcceptance": Scenario "Simple counting of nodes"
Feature "AggregationAcceptance": Scenario "Support column renaming for aggregates as well"
Feature "AggregationAcceptance": Scenario "Support multiple divisions in aggregate function"
Feature "ColumnNameAcceptance": Scenario "Keeping used expression 1"
Feature "ColumnNameAcceptance": Scenario "Keeping used expression 3"
Feature "Create": Scenario "Creating a node with a label"
Feature "Create": Scenario "Creating a node with a property"
Feature "Create": Scenario "Creating a node"
Feature "Create": Scenario "Creating two nodes and a relationship"
Feature "Create": Scenario "Creating two nodes"
Feature "CreateAcceptance": Scenario "A bound node should be recognized after projection with WITH + MERGE node"
Feature "CreateAcceptance": Scenario "A bound node should be recognized after projection with WITH + MERGE pattern"
Feature "CreateAcceptance": Scenario "A bound node should be recognized after projection with WITH + UNWIND"
Feature "CreateAcceptance": Scenario "A bound node should be recognized after projection with WITH + WITH"
Feature "CreateAcceptance": Scenario "Combine MATCH and CREATE"
Feature "CreateAcceptance": Scenario "Combine MATCH, WITH and CREATE"
Feature "CreateAcceptance": Scenario "Create a pattern with multiple hops in the reverse direction"
Feature "CreateAcceptance": Scenario "Create a pattern with multiple hops in varying directions"
Feature "CreateAcceptance": Scenario "Create a pattern with multiple hops with multiple types and varying directions"
Feature "CreateAcceptance": Scenario "Create a pattern with multiple hops"
Feature "CreateAcceptance": Scenario "Create a relationship and an end node from a matched starting node"
Feature "CreateAcceptance": Scenario "Create a relationship with a property"
Feature "CreateAcceptance": Scenario "Create a relationship with a reversed direction"
Feature "CreateAcceptance": Scenario "Create a relationship with the correct direction"
Feature "CreateAcceptance": Scenario "Create a self loop using MATCH"
Feature "CreateAcceptance": Scenario "Create a self loop"
Feature "CreateAcceptance": Scenario "Create a simple pattern"
Feature "CreateAcceptance": Scenario "Create a single node after a WITH"
Feature "CreateAcceptance": Scenario "Create a single node with multiple labels"
Feature "CreateAcceptance": Scenario "Create a single node with properties"
Feature "CreateAcceptance": Scenario "Create nodes and relationships"
Feature "CreateAcceptance": Scenario "Creating a node with null properties should not return those properties"
Feature "CreateAcceptance": Scenario "Creating a pattern with multiple hops and changing directions"
Feature "CreateAcceptance": Scenario "Creating a relationship with null properties should not return those properties"
Feature "CreateAcceptance": Scenario "Newly-created nodes not visible to preceding MATCH"
Feature "CreateAcceptance": Scenario "Nodes are not created when aliases are applied to variable names multiple times"
Feature "CreateAcceptance": Scenario "Nodes are not created when aliases are applied to variable names"
Feature "CreateAcceptance": Scenario "Only a single node is created when an alias is applied to a variable name multiple times"
Feature "CreateAcceptance": Scenario "Only a single node is created when an alias is applied to a variable name"
Feature "DeleteAcceptance": Scenario "Create and delete in same query"
Feature "DeleteAcceptance": Scenario "Delete node from a list"
Feature "DeleteAcceptance": Scenario "Delete nodes from a map"
Feature "DeleteAcceptance": Scenario "Delete nodes"
Feature "DeleteAcceptance": Scenario "Delete on null node"
Feature "DeleteAcceptance": Scenario "Delete on null path"
Feature "DeleteAcceptance": Scenario "Delete optionally matched relationship"
Feature "DeleteAcceptance": Scenario "Delete paths from nested map/list"
Feature "DeleteAcceptance": Scenario "Delete relationship from a list"
Feature "DeleteAcceptance": Scenario "Delete relationship with bidirectional matching"
Feature "DeleteAcceptance": Scenario "Delete relationships from a map"
Feature "DeleteAcceptance": Scenario "Delete relationships from nested map/list"
Feature "DeleteAcceptance": Scenario "Delete relationships"
Feature "DeleteAcceptance": Scenario "Deleting connected nodes"
Feature "DeleteAcceptance": Scenario "Detach delete node"
Feature "DeleteAcceptance": Scenario "Detach delete nodes from nested map/list"
Feature "DeleteAcceptance": Scenario "Detach delete on null node"
Feature "DeleteAcceptance": Scenario "Detach deleting connected nodes and relationships"
Feature "DeleteAcceptance": Scenario "Detach deleting paths"
Feature "DeleteAcceptance": Scenario "Undirected expand followed by delete and count"
Feature "DeleteAcceptance": Scenario "Undirected variable length expand followed by delete and count"
Feature "DurationBetweenAcceptance": Scenario "Should compute duration between if they differ only by a fraction of a second and the first comes after the second."
Feature "DurationBetweenAcceptance": Scenario "Should compute duration between two temporals in days"
Feature "DurationBetweenAcceptance": Scenario "Should compute duration between two temporals in months"
Feature "DurationBetweenAcceptance": Scenario "Should compute duration between two temporals in seconds"
Feature "DurationBetweenAcceptance": Scenario "Should compute duration between two temporals"
Feature "DurationBetweenAcceptance": Scenario "Should compute durations with no difference"
Feature "DurationBetweenAcceptance": Scenario "Should compute negative duration between in big units"
Feature "DurationBetweenAcceptance": Scenario "Should handle durations at daylight saving time day"
Feature "DurationBetweenAcceptance": Scenario "Should handle large durations in seconds"
Feature "DurationBetweenAcceptance": Scenario "Should handle large durations"
Feature "DurationBetweenAcceptance": Scenario "Should handle when seconds and subseconds have different signs"
Feature "DurationBetweenAcceptance": Scenario "Should propagate null"
Feature "DurationBetweenAcceptance": Scenario "Should split between boundaries correctly"
Feature "EqualsAcceptance": Scenario "Comparing nodes to nodes"
Feature "EqualsAcceptance": Scenario "Comparing relationships to relationships"
Feature "ExpressionAcceptance": Scenario "Execute n['name'] in update queries"
Feature "ExpressionAcceptance": Scenario "Use dynamic property lookup based on parameters when there is lhs type information"
Feature "FunctionsAcceptance": Scenario "Functions should return null if they get path containing unbound"
Feature "FunctionsAcceptance": Scenario "`percentileCont()` failing on bad arguments"
Feature "FunctionsAcceptance": Scenario "`percentileCont()`"
Feature "FunctionsAcceptance": Scenario "`percentileDisc()` failing in more involved query"
Feature "FunctionsAcceptance": Scenario "`percentileDisc()` failing on bad arguments"
Feature "FunctionsAcceptance": Scenario "`percentileDisc()`"
Feature "FunctionsAcceptance": Scenario "`type()` on mixed null and non-null relationships"
Feature "FunctionsAcceptance": Scenario "`type()` on null relationship"
Feature "JoinAcceptance": Scenario "Find friends of others"
Feature "KeysAcceptance": Scenario "Using `keys()` on a relationship, empty result"
Feature "KeysAcceptance": Scenario "Using `keys()` on a relationship, non-empty result"
Feature "KeysAcceptance": Scenario "Using `keys()` on a single node, empty result"
Feature "KeysAcceptance": Scenario "Using `keys()` on a single node, non-empty result"
Feature "KeysAcceptance": Scenario "Using `keys()` on an optionally matched node"
Feature "KeysAcceptance": Scenario "Using `keys()` on an optionally matched relationship"
Feature "KeysAcceptance": Scenario "Using `keys()` on multiple nodes, non-empty result"
Feature "LabelsAcceptance": Scenario "Adding a single label"
Feature "LabelsAcceptance": Scenario "Adding multiple labels"
Feature "LabelsAcceptance": Scenario "Create node with label in pattern"
Feature "LabelsAcceptance": Scenario "Creating node with two labels"
Feature "LabelsAcceptance": Scenario "Creating node without label"
Feature "LabelsAcceptance": Scenario "Ignore space before colon"
Feature "LabelsAcceptance": Scenario "Ignore space when creating node with labels"
Feature "LabelsAcceptance": Scenario "Ignoring intermediate whitespace 1"
Feature "LabelsAcceptance": Scenario "Ignoring intermediate whitespace 2"
Feature "LabelsAcceptance": Scenario "Removing a label"
Feature "LabelsAcceptance": Scenario "Removing a non-existent label"
Feature "LargeCreateQuery": Scenario "Generate the movie graph correctly"
Feature "LargeCreateQuery": Scenario "Many CREATE clauses"
Feature "ListOperations": Scenario "Collect and extract using a list comprehension"
Feature "ListOperations": Scenario "Collect and filter using a list comprehension"
Feature "ListOperations": Scenario "Returning nested expressions based on list property"
Feature "ListOperations": Scenario "Setting and returning the size of a list property"
Feature "ListOperations": Scenario "Size of list comprehension"
Feature "MatchAcceptance": Scenario "Accept skip zero"
Feature "MatchAcceptance": Scenario "Return a named var length path of length zero"
Feature "MatchAcceptance": Scenario "Return a var length path of length zero"
Feature "MatchAcceptance": Scenario "Return a var length path"
Feature "MatchAcceptance": Scenario "Return relationships by collecting them as a list - directed, one way"
Feature "MatchAcceptance": Scenario "Return relationships by collecting them as a list - undirected, starting from one extreme"
Feature "MatchAcceptance": Scenario "Return relationships by collecting them as a list - undirected, starting from two extremes"
Feature "MatchAcceptance": Scenario "Return relationships by fetching them from the path - starting from the end"
Feature "MatchAcceptance": Scenario "Return relationships by fetching them from the path"
Feature "MatchAcceptance": Scenario "Return two subgraphs with bound undirected relationship and optional relationship"
Feature "MatchAcceptance": Scenario "Use multiple MATCH clauses to do a Cartesian product"
Feature "MatchAcceptance2": Scenario "Aggregation with named paths"
Feature "MatchAcceptance2": Scenario "Comparing nodes for equality"
Feature "MatchAcceptance2": Scenario "Counting an empty graph"
Feature "MatchAcceptance2": Scenario "Counting rows after MATCH, MERGE, OPTIONAL MATCH"
Feature "MatchAcceptance2": Scenario "Do not fail when predicates on optionally matched and missed nodes are invalid"
Feature "MatchAcceptance2": Scenario "Excluding connected nodes"
Feature "MatchAcceptance2": Scenario "Handling cyclic patterns when separated into two parts"
Feature "MatchAcceptance2": Scenario "Handling cyclic patterns"
Feature "MatchAcceptance2": Scenario "Handling fixed-length variable length pattern"
Feature "MatchAcceptance2": Scenario "MATCH and OPTIONAL MATCH on same pattern"
Feature "MatchAcceptance2": Scenario "MATCH with OPTIONAL MATCH in longer pattern"
Feature "MatchAcceptance2": Scenario "Matching and optionally matching with bound nodes in reverse direction"
Feature "MatchAcceptance2": Scenario "Matching and optionally matching with unbound nodes and equality predicate in reverse direction"
Feature "MatchAcceptance2": Scenario "Matching and returning ordered results, with LIMIT"
Feature "MatchAcceptance2": Scenario "Matching disconnected patterns"
Feature "MatchAcceptance2": Scenario "Matching from null nodes should return no results owing to finding no matches"
Feature "MatchAcceptance2": Scenario "Matching from null nodes should return no results owing to matches being filtered out"
Feature "MatchAcceptance2": Scenario "Matching longer variable length paths"
Feature "MatchAcceptance2": Scenario "Matching path with both directions should respect other directions"
Feature "MatchAcceptance2": Scenario "Matching path with multiple bidirectional relationships"
Feature "MatchAcceptance2": Scenario "Matching relationships into a list and matching variable length using the list"
Feature "MatchAcceptance2": Scenario "Matching relationships into a list and matching variable length using the list, with bound nodes"
Feature "MatchAcceptance2": Scenario "Matching relationships into a list and matching variable length using the list, with bound nodes, wrong direction"
Feature "MatchAcceptance2": Scenario "Matching twice with conflicting relationship types on same relationship"
Feature "MatchAcceptance2": Scenario "Matching twice with duplicate relationship types on same relationship"
Feature "MatchAcceptance2": Scenario "Matching using a relationship that is already bound"
Feature "MatchAcceptance2": Scenario "Matching using a relationship that is already bound, in conjunction with aggregation and ORDER BY"
Feature "MatchAcceptance2": Scenario "Matching using a relationship that is already bound, in conjunction with aggregation"
Feature "MatchAcceptance2": Scenario "Matching using self-referencing pattern returns no result"
Feature "MatchAcceptance2": Scenario "Matching variable length pattern with property predicate"
Feature "MatchAcceptance2": Scenario "Matching variable length patterns from a bound node"
Feature "MatchAcceptance2": Scenario "Matching with LIMIT and optionally matching using a relationship and node that are both already bound"
Feature "MatchAcceptance2": Scenario "Matching with LIMIT and optionally matching using a relationship that is already bound"
Feature "MatchAcceptance2": Scenario "Matching with LIMIT and predicates, then matching again using a relationship and node that are both already bound along with a duplicate predicate"
Feature "MatchAcceptance2": Scenario "Matching with LIMIT, then matching again using a relationship and node that are both already bound along with an additional predicate"
Feature "MatchAcceptance2": Scenario "Named path with undirected fixed variable length pattern"
Feature "MatchAcceptance2": Scenario "Non-optional matches should not return nulls"
Feature "MatchAcceptance2": Scenario "OPTIONAL MATCH returns null"
Feature "MatchAcceptance2": Scenario "OPTIONAL MATCH with previously bound nodes"
Feature "MatchAcceptance2": Scenario "ORDER BY with LIMIT"
Feature "MatchAcceptance2": Scenario "Optionally matching from null nodes should return null"
Feature "MatchAcceptance2": Scenario "Optionally matching named paths with single and variable length patterns"
Feature "MatchAcceptance2": Scenario "Optionally matching named paths with variable length patterns"
Feature "MatchAcceptance2": Scenario "Optionally matching named paths"
Feature "MatchAcceptance2": Scenario "Respecting direction when matching non-existent path with multiple directions"
Feature "MatchAcceptance2": Scenario "Returning bound nodes that are not part of the pattern"
Feature "MatchAcceptance2": Scenario "Simple OPTIONAL MATCH on empty graph"
Feature "MatchAcceptance2": Scenario "Simple variable length pattern"
Feature "MatchAcceptance2": Scenario "Variable length pattern checking labels on endnodes"
Feature "MatchAcceptance2": Scenario "Variable length pattern with label predicate on both sides"
Feature "MatchAcceptance2": Scenario "Variable length patterns and nulls"
Feature "MatchAcceptance2": Scenario "Variable length relationship in OPTIONAL MATCH"
Feature "MatchAcceptance2": Scenario "Variable length relationship variables are lists of relationships"
Feature "MatchAcceptance2": Scenario "Variable length relationship without bounds"
Feature "MatchAcceptance2": Scenario "Variable length relationship without lower bound"
Feature "MatchAcceptance2": Scenario "Variable-length named path"
Feature "MatchAcceptance2": Scenario "Zero-length variable length pattern in the middle of the pattern"
Feature "MatchAcceptance2": Scenario "`collect()` filtering nulls"
Feature "MatchingSelfRelationships": Scenario "Counting directed self-relationships"
Feature "MatchingSelfRelationships": Scenario "Counting distinct undirected self-relationships in self-relationship graph"
Feature "MatchingSelfRelationships": Scenario "Counting undirected self-relationships in self-relationship graph"
Feature "MatchingSelfRelationships": Scenario "Directed match of a simple relationship, count"
Feature "MatchingSelfRelationships": Scenario "Directed match of self-relationship on self-relationship graph"
Feature "MatchingSelfRelationships": Scenario "Directed match of self-relationship on self-relationship graph, count"
Feature "MatchingSelfRelationships": Scenario "Directed match on self-relationship graph, count"
Feature "MatchingSelfRelationships": Scenario "Undirected match of self-relationship in self-relationship graph"
Feature "MatchingSelfRelationships": Scenario "Undirected match of self-relationship in self-relationship graph, count"
Feature "MergeIntoAcceptance": Scenario "Copying properties from literal map with ON CREATE"
Feature "MergeIntoAcceptance": Scenario "Copying properties from literal map with ON MATCH"
Feature "MergeIntoAcceptance": Scenario "Copying properties from node with ON CREATE"
Feature "MergeIntoAcceptance": Scenario "Copying properties from node with ON MATCH"
Feature "MergeIntoAcceptance": Scenario "Null-setting one property with ON CREATE"
Feature "MergeIntoAcceptance": Scenario "Updating one property with ON CREATE"
Feature "MergeNodeAcceptance": Scenario "Merge followed by multiple creates"
Feature "MergeNodeAcceptance": Scenario "Merge must properly handle multiple labels"
Feature "MergeNodeAcceptance": Scenario "Merge node and set property on match"
Feature "MergeNodeAcceptance": Scenario "Merge node should create when it doesn't match, properties and label"
Feature "MergeNodeAcceptance": Scenario "Merge node should create when it doesn't match, properties"
Feature "MergeNodeAcceptance": Scenario "Merge node when no nodes exist"
Feature "MergeNodeAcceptance": Scenario "Merge node with label add label on create"
Feature "MergeNodeAcceptance": Scenario "Merge node with label add label on match when it exists"
Feature "MergeNodeAcceptance": Scenario "Merge node with label add property on create"
Feature "MergeNodeAcceptance": Scenario "Merge node with label add property on update when it exists"
Feature "MergeNodeAcceptance": Scenario "Merge node with label when it exists"
Feature "MergeNodeAcceptance": Scenario "Merge node with label"
Feature "MergeNodeAcceptance": Scenario "Merge node with prop and label"
Feature "MergeNodeAcceptance": Scenario "Merges should not be able to match on deleted nodes"
Feature "MergeNodeAcceptance": Scenario "ON CREATE on created nodes"
Feature "MergeNodeAcceptance": Scenario "Should be able to merge using property from match"
Feature "MergeNodeAcceptance": Scenario "Should be able to set labels on match and on create"
Feature "MergeNodeAcceptance": Scenario "Should be able to set labels on match"
Feature "MergeNodeAcceptance": Scenario "Should be able to use properties from match in ON CREATE"
Feature "MergeNodeAcceptance": Scenario "Should be able to use properties from match in ON MATCH and ON CREATE"
Feature "MergeNodeAcceptance": Scenario "Should be able to use properties from match in ON MATCH"
Feature "MergeNodeAcceptance": Scenario "Should handle argument properly"
Feature "MergeNodeAcceptance": Scenario "Should handle arguments properly with only write clauses"
Feature "MergeNodeAcceptance": Scenario "Should support updates while merging"
Feature "MergeNodeAcceptance": Scenario "Should work when finding multiple elements"
Feature "MergeNodeAcceptance": Scenario "Unwind combined with merge"
Feature "MergeRelationshipAcceptance": Scenario "Aliasing of existing nodes 1"
Feature "MergeRelationshipAcceptance": Scenario "Aliasing of existing nodes 2"
Feature "MergeRelationshipAcceptance": Scenario "Creating a relationship"
Feature "MergeRelationshipAcceptance": Scenario "Creating relationship using merged nodes"
Feature "MergeRelationshipAcceptance": Scenario "Creating relationship when all matches filtered out"
Feature "MergeRelationshipAcceptance": Scenario "Creating relationship with property"
Feature "MergeRelationshipAcceptance": Scenario "Do not match on deleted entities"
Feature "MergeRelationshipAcceptance": Scenario "Do not match on deleted relationships"
Feature "MergeRelationshipAcceptance": Scenario "Double aliasing of existing nodes 1"
Feature "MergeRelationshipAcceptance": Scenario "Double aliasing of existing nodes 2"
Feature "MergeRelationshipAcceptance": Scenario "Filtering relationships"
Feature "MergeRelationshipAcceptance": Scenario "Introduce named paths 1"
Feature "MergeRelationshipAcceptance": Scenario "Introduce named paths 2"
Feature "MergeRelationshipAcceptance": Scenario "Match both incoming and outgoing relationships when direction unspecified"
Feature "MergeRelationshipAcceptance": Scenario "Match outgoing relationship when direction unspecified"
Feature "MergeRelationshipAcceptance": Scenario "Matching a relationship"
Feature "MergeRelationshipAcceptance": Scenario "Matching incoming relationship"
Feature "MergeRelationshipAcceptance": Scenario "Matching two relationships"
Feature "MergeRelationshipAcceptance": Scenario "Matching using list property"
Feature "MergeRelationshipAcceptance": Scenario "Mixing MERGE with CREATE"
Feature "MergeRelationshipAcceptance": Scenario "UNWIND with multiple merges"
Feature "MergeRelationshipAcceptance": Scenario "Use outgoing direction when unspecified"
Feature "MergeRelationshipAcceptance": Scenario "Using ON CREATE and ON MATCH"
Feature "MergeRelationshipAcceptance": Scenario "Using ON CREATE on a node"
Feature "MergeRelationshipAcceptance": Scenario "Using ON CREATE on a relationship"
Feature "MergeRelationshipAcceptance": Scenario "Using ON MATCH on a relationship"
Feature "MergeRelationshipAcceptance": Scenario "Using ON MATCH on created node"
Feature "MergeRelationshipAcceptance": Scenario "Using ON MATCH on created relationship"
Feature "MergeRelationshipAcceptance": Scenario "Using bound variables from other updating clause"
Feature "MergeRelationshipAcceptance": Scenario "Using list properties via variable"
Feature "MiscellaneousErrorAcceptance": Scenario "Failing on merging node with null property"
Feature "MiscellaneousErrorAcceptance": Scenario "Failing on merging relationship with null property"
Feature "MiscellaneousErrorAcceptance": Scenario "Failing when setting a list of maps as a property"
Feature "NullAcceptance": Scenario "Ignore null when deleting node"
Feature "NullAcceptance": Scenario "Ignore null when deleting relationship"
Feature "NullAcceptance": Scenario "Ignore null when removing label"
Feature "NullAcceptance": Scenario "Ignore null when removing property"
Feature "NullAcceptance": Scenario "Ignore null when setting label"
Feature "NullAcceptance": Scenario "Ignore null when setting properties using an appending map"
Feature "NullAcceptance": Scenario "Ignore null when setting properties using an overriding map"
Feature "NullAcceptance": Scenario "Ignore null when setting property"
Feature "NullAcceptance": Scenario "Property existence check on null node"
Feature "NullAcceptance": Scenario "Property existence check on optional non-null node"
Feature "NullOperator": Scenario "Property not null check on null node"
Feature "NullOperator": Scenario "Property not null check on optional non-null node"
Feature "NullOperator": Scenario "Property null check on null node"
Feature "NullOperator": Scenario "Property null check on optional non-null node"
Feature "OptionalMatch": Scenario "Satisfies the open world assumption, relationships between different nodes"
Feature "OptionalMatch": Scenario "Satisfies the open world assumption, relationships between same nodes"
Feature "OptionalMatch": Scenario "Satisfies the open world assumption, single relationship"
Feature "OptionalMatchAcceptance": Scenario "Handling correlated optional matches; first does not match implies second does not match"
Feature "OptionalMatchAcceptance": Scenario "Handling optional matches between nulls"
Feature "OptionalMatchAcceptance": Scenario "Handling optional matches between optionally matched entities"
Feature "OptionalMatchAcceptance": Scenario "Longer pattern with bound nodes without matches"
Feature "OptionalMatchAcceptance": Scenario "Longer pattern with bound nodes"
Feature "OptionalMatchAcceptance": Scenario "MATCH after OPTIONAL MATCH"
Feature "OptionalMatchAcceptance": Scenario "Named paths in optional matches"
Feature "OptionalMatchAcceptance": Scenario "Named paths inside optional matches with node predicates"
Feature "OptionalMatchAcceptance": Scenario "OPTIONAL MATCH and WHERE"
Feature "OptionalMatchAcceptance": Scenario "OPTIONAL MATCH and `collect()`"
Feature "OptionalMatchAcceptance": Scenario "OPTIONAL MATCH and bound nodes"
Feature "OptionalMatchAcceptance": Scenario "OPTIONAL MATCH on two relationships and WHERE"
Feature "OptionalMatchAcceptance": Scenario "OPTIONAL MATCH with labels on the optional end node"
Feature "OptionalMatchAcceptance": Scenario "Optionally matching self-loops without matches"
Feature "OptionalMatchAcceptance": Scenario "Optionally matching self-loops"
Feature "OptionalMatchAcceptance": Scenario "Respect predicates on the OPTIONAL MATCH"
Feature "OptionalMatchAcceptance": Scenario "Return null when no matches due to inline label predicate"
Feature "OptionalMatchAcceptance": Scenario "Return null when no matches due to label predicate in WHERE"
Feature "OptionalMatchAcceptance": Scenario "Returning label predicate on null node"
Feature "OptionalMatchAcceptance": Scenario "Two OPTIONAL MATCH clauses and WHERE"
Feature "OptionalMatchAcceptance": Scenario "Variable length optional relationships with bound nodes"
Feature "OptionalMatchAcceptance": Scenario "Variable length optional relationships with bound nodes, no matches"
Feature "OptionalMatchAcceptance": Scenario "Variable length optional relationships with length predicates"
Feature "OptionalMatchAcceptance": Scenario "Variable length optional relationships"
Feature "OptionalMatchAcceptance": Scenario "WITH after OPTIONAL MATCH"
Feature "OrderByAcceptance": Scenario "Handle ORDER BY with LIMIT 1"
Feature "OrderByAcceptance": Scenario "ORDER BY with LIMIT 0 should not generate errors"
Feature "OrderByAcceptance": Scenario "ORDER BY with negative parameter for LIMIT should not generate errors"
Feature "PathEquality": Scenario "Direction of traversed relationship is not significant for path equality, simple"
Feature "PatternComprehension": Scenario "Aggregating on pattern comprehension"
Feature "PatternComprehension": Scenario "Get node degree via size of pattern comprehension that specifies a relationship type"
Feature "PatternComprehension": Scenario "Get node degree via size of pattern comprehension that specifies multiple relationship types"
Feature "PatternComprehension": Scenario "Get node degree via size of pattern comprehension"
Feature "PatternComprehension": Scenario "Introducing new node variable in pattern comprehension"
Feature "PatternComprehension": Scenario "Introducing new relationship variable in pattern comprehension"
Feature "PatternComprehension": Scenario "Pattern comprehension and ORDER BY"
Feature "PatternComprehension": Scenario "Pattern comprehension inside list comprehension"
Feature "PatternComprehension": Scenario "Returning a pattern comprehension with bound nodes"
Feature "PatternComprehension": Scenario "Returning a pattern comprehension with label predicate"
Feature "PatternComprehension": Scenario "Returning a pattern comprehension"
Feature "PatternComprehension": Scenario "Using a pattern comprehension in a WITH"
Feature "PatternComprehension": Scenario "Using a variable-length pattern comprehension in a WITH"
Feature "PatternComprehension": Scenario "Using pattern comprehension in RETURN"
Feature "PatternComprehension": Scenario "Using pattern comprehension to test existence"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure that takes no arguments"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to VOID procedure that takes no arguments"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to VOID procedure that takes no arguments, called with implicit arguments"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure that takes no arguments and yields no results"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure that takes no arguments and yields no results, called with implicit arguments"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with explicit arguments"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with argument of type NUMBER accepts value of type INTEGER"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with argument of type NUMBER accepts value of type FLOAT"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with argument of type FLOAT accepts value of type INTEGER"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with null argument"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure should fail if implicit argument is missing"
Feature "ProcedureCallAcceptance": Scenario "Calling the same procedure twice using the same outputs in each call"
Feature "ProcedureCallAcceptance": Scenario "In-query call to VOID procedure does not consume rows"
Feature "ProcedureCallAcceptance": Scenario "In-query call to VOID procedure that takes no arguments"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure that takes no arguments and yields no results"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure that takes no arguments"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with argument of type FLOAT accepts value of type INTEGER"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with argument of type INTEGER accepts value of type FLOAT"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with argument of type NUMBER accepts value of type FLOAT"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with argument of type NUMBER accepts value of type INTEGER"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with explicit arguments that drops all result fields"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with explicit arguments"
Feature "ProcedureCallAcceptance": Scenario "In-query call to procedure with null argument"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with argument of type INTEGER accepts value of type FLOAT"
Feature "ProcedureCallAcceptance": Scenario "Standalone call to procedure with implicit arguments"
Feature "RemoveAcceptance": Scenario "Remove a missing property should be a valid operation"
Feature "RemoveAcceptance": Scenario "Remove a single label"
Feature "RemoveAcceptance": Scenario "Remove a single node property"
Feature "RemoveAcceptance": Scenario "Remove a single relationship property"
Feature "RemoveAcceptance": Scenario "Remove multiple labels"
Feature "RemoveAcceptance": Scenario "Remove multiple node properties"
Feature "RemoveAcceptance": Scenario "Remove multiple relationship properties"
Feature "RemoveAcceptance": Scenario "Should ignore nulls"
Feature "ReturnAcceptance2": Scenario "Arithmetic expressions inside aggregation"
Feature "ReturnAcceptance2": Scenario "DISTINCT inside aggregation should work with lists in maps"
Feature "ReturnAcceptance2": Scenario "DISTINCT inside aggregation should work with nested lists in maps"
Feature "ReturnAcceptance2": Scenario "DISTINCT inside aggregation should work with nested lists of maps in maps"
Feature "ReturnAcceptance2": Scenario "DISTINCT on nullable values"
Feature "ReturnAcceptance2": Scenario "Do not fail when returning type of deleted relationships"
Feature "ReturnAcceptance2": Scenario "Fail when returning labels of deleted nodes"
Feature "ReturnAcceptance2": Scenario "Fail when returning properties of deleted nodes"
Feature "ReturnAcceptance2": Scenario "Fail when returning properties of deleted relationships"
Feature "ReturnAcceptance2": Scenario "Handling DISTINCT with lists in maps"
Feature "ReturnAcceptance2": Scenario "Limiting amount of rows when there are fewer left than the LIMIT argument"
Feature "ReturnAcceptance2": Scenario "Multiple aliasing and backreferencing"
Feature "ReturnAcceptance2": Scenario "Returned columns do not change from using ORDER BY"
Feature "ReturnAcceptance2": Scenario "Using aliased DISTINCT expression in ORDER BY"
Feature "ReturnAcceptanceTest": Scenario "Get rows in the middle by param"
Feature "ReturnAcceptanceTest": Scenario "Get rows in the middle"
Feature "ReturnAcceptanceTest": Scenario "Limit to two hits with explicit order"
Feature "ReturnAcceptanceTest": Scenario "Start the result from the second row by param"
Feature "ReturnAcceptanceTest": Scenario "Start the result from the second row"
Feature "ReturnAcceptanceTest": Scenario "Support ordering by a property after being distinct-ified"
Feature "ReturnAcceptanceTest": Scenario "Support sort and distinct"
Feature "SemanticErrorAcceptance": Scenario "Failing when performing property access on a non-map 2"
Feature "SetAcceptance": Scenario "Add a label to a node"
Feature "SetAcceptance": Scenario "Adding a list property"
Feature "SetAcceptance": Scenario "Concatenate elements in reverse onto a list property"
Feature "SetAcceptance": Scenario "Concatenate elements onto a list property"
Feature "SetAcceptance": Scenario "Explicit null values in a map remove old values"
Feature "SetAcceptance": Scenario "Non-existent values in a property map are removed with SET ="
Feature "SetAcceptance": Scenario "Overwrite values when using +="
Feature "SetAcceptance": Scenario "Retain old values when using +="
Feature "SetAcceptance": Scenario "Set a property by selecting the node using a simple expression"
Feature "SetAcceptance": Scenario "Set a property by selecting the relationship using a simple expression"
Feature "SetAcceptance": Scenario "Set a property to an expression"
Feature "SetAcceptance": Scenario "Set a property"
Feature "SetAcceptance": Scenario "Setting a node property to null removes the existing property"
Feature "SetAcceptance": Scenario "Setting a property to null removes the property"
Feature "SetAcceptance": Scenario "Setting a relationship property to null removes the existing property"
Feature "SkipLimitAcceptanceTest": Scenario "SKIP with an expression that does not depend on variables"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract duration to or from date time"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract duration to or from date"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract duration to or from local date time"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract duration to or from local time"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract duration to or from time"
Feature "TemporalArithmeticAcceptance": Scenario "Should add or subtract durations"
Feature "TemporalComparisonAcceptance": Scenario "Should compare date times"
Feature "TemporalComparisonAcceptance": Scenario "Should compare dates"
Feature "TemporalComparisonAcceptance": Scenario "Should compare durations for equality"
Feature "TemporalComparisonAcceptance": Scenario "Should compare local date times"
Feature "TemporalComparisonAcceptance": Scenario "Should compare local times"
Feature "TemporalComparisonAcceptance": Scenario "Should compare times"
Feature "TemporalCreateAcceptance": Scenario "Should construct date time from epoch"
Feature "TemporalCreateAcceptance": Scenario "Should construct date time with default time zone"
Feature "TemporalCreateAcceptance": Scenario "Should construct date time with named time zone"
Feature "TemporalCreateAcceptance": Scenario "Should construct date time with offset time zone"
Feature "TemporalCreateAcceptance": Scenario "Should construct date"
Feature "TemporalCreateAcceptance": Scenario "Should construct duration"
Feature "TemporalCreateAcceptance": Scenario "Should construct local date time"
Feature "TemporalCreateAcceptance": Scenario "Should construct local time"
Feature "TemporalCreateAcceptance": Scenario "Should construct temporal with time offset with second precision"
Feature "TemporalCreateAcceptance": Scenario "Should construct time"
Feature "TemporalCreateAcceptance": Scenario "Should construct week date"
Feature "TemporalCreateAcceptance": Scenario "Should construct week datetime"
Feature "TemporalCreateAcceptance": Scenario "Should construct week localdatetime"
Feature "TemporalCreateAcceptance": Scenario "Should propagate null"
Feature "TemporalCreateAcceptance": Scenario "Should store date array"
Feature "TemporalCreateAcceptance": Scenario "Should store date time array"
Feature "TemporalCreateAcceptance": Scenario "Should store date time"
Feature "TemporalCreateAcceptance": Scenario "Should store date"
Feature "TemporalCreateAcceptance": Scenario "Should store duration array"
Feature "TemporalCreateAcceptance": Scenario "Should store duration"
Feature "TemporalCreateAcceptance": Scenario "Should store local date time array"
Feature "TemporalCreateAcceptance": Scenario "Should store local date time"
Feature "TemporalCreateAcceptance": Scenario "Should store local time array"
Feature "TemporalCreateAcceptance": Scenario "Should store local time"
Feature "TemporalCreateAcceptance": Scenario "Should store time array"
Feature "TemporalCreateAcceptance": Scenario "Should store time"
Feature "TemporalParseAcceptance": Scenario "Should parse date from string"
Feature "TemporalParseAcceptance": Scenario "Should parse date time from string"
Feature "TemporalParseAcceptance": Scenario "Should parse date time with named time zone from string"
Feature "TemporalParseAcceptance": Scenario "Should parse duration from string"
Feature "TemporalParseAcceptance": Scenario "Should parse local date time from string"
Feature "TemporalParseAcceptance": Scenario "Should parse local time from string"
Feature "TemporalParseAcceptance": Scenario "Should parse time from string"
Feature "TemporalSelectAcceptance": Scenario "Should datetime into date time"
Feature "TemporalSelectAcceptance": Scenario "Should select date and time into date time"
Feature "TemporalSelectAcceptance": Scenario "Should select date and time into local date time"
Feature "TemporalSelectAcceptance": Scenario "Should select date into date time"
Feature "TemporalSelectAcceptance": Scenario "Should select date into local date time"
Feature "TemporalSelectAcceptance": Scenario "Should select date"
Feature "TemporalSelectAcceptance": Scenario "Should select datetime into local date time"
Feature "TemporalSelectAcceptance": Scenario "Should select local time"
Feature "TemporalSelectAcceptance": Scenario "Should select time into date time"
Feature "TemporalSelectAcceptance": Scenario "Should select time into local date time"
Feature "TemporalSelectAcceptance": Scenario "Should select time"
Feature "TemporalToStringAcceptance": Scenario "Should serialize date time"
Feature "TemporalToStringAcceptance": Scenario "Should serialize date"
Feature "TemporalToStringAcceptance": Scenario "Should serialize duration"
Feature "TemporalToStringAcceptance": Scenario "Should serialize local date time"
Feature "TemporalToStringAcceptance": Scenario "Should serialize local time"
Feature "TemporalToStringAcceptance": Scenario "Should serialize time"
Feature "TemporalToStringAcceptance": Scenario "Should serialize timezones correctly"
Feature "TemporalTruncateAcceptance": Scenario "Should truncate date"
Feature "TemporalTruncateAcceptance": Scenario "Should truncate datetime"
Feature "TemporalTruncateAcceptance": Scenario "Should truncate localdatetime"
Feature "TemporalTruncateAcceptance": Scenario "Should truncate localtime"
Feature "TemporalTruncateAcceptance": Scenario "Should truncate time"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with different labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with different relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with explicit subset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with implicit subset of labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with implicit subset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with implicit superset of labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with same labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend with superset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is a friend"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with different labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with different relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with explicit subset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with implicit subset of labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with implicit subset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with implicit superset of labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with same labels"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend with superset of relationship type"
Feature "TriadicSelection": Scenario "Handling triadic friend of a friend that is not a friend"
Feature "TypeConversionFunctions": Scenario "`toFloat()`"
Feature "TypeConversionFunctions": Scenario "`toInteger()`"
Feature "TypeConversionFunctions": Scenario "`toString()`"
Feature "UnionAcceptance": Scenario "Should be able to create text output from union queries"
Feature "UnionAcceptance": Scenario "Three elements, two unique, distinct"
Feature "UnionAcceptance": Scenario "Three elements, two unique, not distinct"
Feature "UnionAcceptance": Scenario "Two elements, both unique, distinct"
Feature "UnionAcceptance": Scenario "Two elements, both unique, not distinct"
Feature "UnwindAcceptance": Scenario "Creating nodes from an unwound parameter list"
Feature "UnwindAcceptance": Scenario "Unwind does not remove variables from scope"
Feature "UnwindAcceptance": Scenario "Unwind with merge"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, longer 1"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, longer 2"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, longer 3"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, single length 1"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, single length 2"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, zero length 1"
Feature "VarLengthAcceptance": Scenario "Handling a variable length relationship and a standard relationship in chain, zero length 2"
Feature "VarLengthAcceptance": Scenario "Handling explicitly unbounded variable length match"
Feature "VarLengthAcceptance": Scenario "Handling lower bounded variable length match 1"
Feature "VarLengthAcceptance": Scenario "Handling lower bounded variable length match 2"
Feature "VarLengthAcceptance": Scenario "Handling lower bounded variable length match 3"
Feature "VarLengthAcceptance": Scenario "Handling mixed relationship patterns 1"
Feature "VarLengthAcceptance": Scenario "Handling mixed relationship patterns 2"
Feature "VarLengthAcceptance": Scenario "Handling mixed relationship patterns and directions 1"
Feature "VarLengthAcceptance": Scenario "Handling mixed relationship patterns and directions 2"
Feature "VarLengthAcceptance": Scenario "Handling single bounded variable length match 1"
Feature "VarLengthAcceptance": Scenario "Handling single bounded variable length match 2"
Feature "VarLengthAcceptance": Scenario "Handling single bounded variable length match 3"
Feature "VarLengthAcceptance": Scenario "Handling symmetrically bounded variable length match, bounds are one"
Feature "VarLengthAcceptance": Scenario "Handling symmetrically bounded variable length match, bounds are two"
Feature "VarLengthAcceptance": Scenario "Handling symmetrically bounded variable length match, bounds are zero"
Feature "VarLengthAcceptance": Scenario "Handling unbounded variable length match"
Feature "VarLengthAcceptance": Scenario "Handling upper and lower bounded variable length match 1"
Feature "VarLengthAcceptance": Scenario "Handling upper and lower bounded variable length match 2"
Feature "VarLengthAcceptance": Scenario "Handling upper and lower bounded variable length match, empty interval 1"
Feature "VarLengthAcceptance": Scenario "Handling upper and lower bounded variable length match, empty interval 2"
Feature "VarLengthAcceptance": Scenario "Handling upper bounded variable length match 1"
Feature "VarLengthAcceptance": Scenario "Handling upper bounded variable length match 2"
Feature "VarLengthAcceptance": Scenario "Handling upper bounded variable length match, empty interval"
Feature "VarLengthAcceptance2": Scenario "Handling relationships that are already bound in variable length paths"
Feature "WithAcceptance": Scenario "A simple pattern with one bound endpoint"
Feature "WithAcceptance": Scenario "Connected components succeeding WITH"
Feature "WithAcceptance": Scenario "Handle dependencies across WITH with SKIP"
Feature "WithAcceptance": Scenario "No dependencies between the query parts"
Feature "WithAcceptance": Scenario "Null handling"
Feature "WithAcceptance": Scenario "ORDER BY a DISTINCT column"
Feature "WithAcceptance": Scenario "ORDER BY and LIMIT can be used"
Feature "WithAcceptance": Scenario "WHERE on a DISTINCT column"

// Bug in TCK parser
Feature "LargeCreateQuery": Scenario "Generate the movie graph correctly"
