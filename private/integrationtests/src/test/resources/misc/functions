+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| name                                                | signature                                                                                                                                                    | description                                                                                                                                                     | aggregating |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| "abs"                                               | "abs(input :: INTEGER?) :: (INTEGER?)"                                                                                                                       | "Returns the absolute value of an integer."                                                                                                                     | false       |
| "abs"                                               | "abs(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the absolute value of a floating point number."                                                                                                        | false       |
| "acos"                                              | "acos(input :: FLOAT?) :: (FLOAT?)"                                                                                                                          | "Returns the arccosine of a number in radians."                                                                                                                 | false       |
| "asin"                                              | "asin(input :: FLOAT?) :: (FLOAT?)"                                                                                                                          | "Returns the arcsine of a number in radians."                                                                                                                   | false       |
| "atan"                                              | "atan(input :: FLOAT?) :: (FLOAT?)"                                                                                                                          | "Returns the arctangent of a number in radians."                                                                                                                | false       |
| "atan2"                                             | "atan2(y :: FLOAT?, x :: FLOAT?) :: (FLOAT?)"                                                                                                                | "Returns the arctangent2 of a set of coordinates in radians."                                                                                                   | false       |
| "avg"                                               | "avg(input :: INTEGER?) :: (INTEGER?)"                                                                                                                       | "Returns the average of a set of integer values."                                                                                                               | true        |
| "avg"                                               | "avg(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the average of a set of floating point values."                                                                                                        | true        |
| "avg"                                               | "avg(input :: DURATION?) :: (DURATION?)"                                                                                                                     | "Returns the average of a set of duration values."                                                                                                              | true        |
| "ceil"                                              | "ceil(input :: FLOAT?) :: (FLOAT?)"                                                                                                                          | "Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer."                                     | false       |
| "coalesce"                                          | "coalesce(input :: ANY?) :: (ANY?)"                                                                                                                          | "Returns the first non-null value in a list of expressions."                                                                                                    | false       |
| "collect"                                           | "collect(input :: ANY?) :: (ANY?)"                                                                                                                           | "Returns a list containing the values returned by an expression."                                                                                               | true        |
| "cos"                                               | "cos(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the cosine  of a number."                                                                                                                              | false       |
| "cot"                                               | "cot(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the cotangent of a number."                                                                                                                            | false       |
| "count"                                             | "count(input :: ANY?) :: (INTEGER?)"                                                                                                                         | "Returns the number of values or rows."                                                                                                                         | true        |
| "date"                                              | "date(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATE?)"                                                                                                 | "Create a Date instant."                                                                                                                                        | false       |
| "date.realtime"                                     | "date.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATE?)"                                                                                     | "Get the current Date instant using the realtime clock."                                                                                                        | false       |
| "date.statement"                                    | "date.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATE?)"                                                                                    | "Get the current Date instant using the statement clock."                                                                                                       | false       |
| "date.transaction"                                  | "date.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATE?)"                                                                                  | "Get the current Date instant using the transaction clock."                                                                                                     | false       |
| "date.truncate"                                     | "date.truncate(unit :: STRING?, input :: ANY?, fields = null :: MAP?) :: (DATE?)"                                                                            | "Truncate the input temporal value to a Date instant using the specified unit."                                                                                 | false       |
| "datetime"                                          | "datetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATETIME?)"                                                                                         | "Create a DateTime instant."                                                                                                                                    | false       |
| "datetime.fromepoch"                                | "datetime.fromepoch(seconds :: NUMBER?, nanoseconds :: NUMBER?) :: (DATETIME?)"                                                                              | "Create a DateTime given the seconds and nanoseconds since the start of the epoch."                                                                             | false       |
| "datetime.fromepochmillis"                          | "datetime.fromepochmillis(milliseconds :: NUMBER?) :: (DATETIME?)"                                                                                           | "Create a DateTime given the milliseconds since the start of the epoch."                                                                                        | false       |
| "datetime.realtime"                                 | "datetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATETIME?)"                                                                             | "Get the current DateTime instant using the realtime clock."                                                                                                    | false       |
| "datetime.statement"                                | "datetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATETIME?)"                                                                            | "Get the current DateTime instant using the statement clock."                                                                                                   | false       |
| "datetime.transaction"                              | "datetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (DATETIME?)"                                                                          | "Get the current DateTime instant using the transaction clock."                                                                                                 | false       |
| "datetime.truncate"                                 | "datetime.truncate(unit :: STRING?, input :: ANY?, fields = null :: MAP?) :: (DATETIME?)"                                                                    | "Truncate the input temporal value to a DateTime instant using the specified unit."                                                                             | false       |
| "degrees"                                           | "degrees(input :: FLOAT?) :: (FLOAT?)"                                                                                                                       | "Converts radians to degrees."                                                                                                                                  | false       |
| "distance"                                          | "distance(from :: POINT?, to :: POINT?) :: (FLOAT?)"                                                                                                         | "Returns a floating point number representing the geodesic distance between any two points in the same CRS."                                                    | false       |
| "duration"                                          | "duration(input :: ANY?) :: (DURATION?)"                                                                                                                     | "Construct a Duration value."                                                                                                                                   | false       |
| "duration.between"                                  | "duration.between(from :: ANY?, to :: ANY?) :: (DURATION?)"                                                                                                  | "Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in logical units."                                                | false       |
| "duration.inDays"                                   | "duration.inDays(from :: ANY?, to :: ANY?) :: (DURATION?)"                                                                                                   | "Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in days."                                                         | false       |
| "duration.inMonths"                                 | "duration.inMonths(from :: ANY?, to :: ANY?) :: (DURATION?)"                                                                                                 | "Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in months."                                                       | false       |
| "duration.inSeconds"                                | "duration.inSeconds(from :: ANY?, to :: ANY?) :: (DURATION?)"                                                                                                | "Compute the duration between the 'from' instant (inclusive) and the 'to' instant (exclusive) in seconds."                                                      | false       |
| "e"                                                 | "e() :: (FLOAT?)"                                                                                                                                            | "Returns the base of the natural logarithm, e."                                                                                                                 | false       |
| "endNode"                                           | "endnode(input :: RELATIONSHIP?) :: (NODE?)"                                                                                                                 | "Returns the end node of a relationship."                                                                                                                       | false       |
| "exists"                                            | "exists(input :: ANY?) :: (BOOLEAN?)"                                                                                                                        | "Returns true if a match for the pattern exists in the graph, or if the specified property exists in the node, relationship or map."                            | false       |
| "exp"                                               | "exp(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns e^n, where e is the base of the natural logarithm, and n is the value of the argument expression."                                                     | false       |
| "filename"                                          | "filename() :: (STRING?)"                                                                                                                                    | "Returns the name of the file that LOAD CSV is using."                                                                                                          | false       |
| "floor"                                             | "floor(input :: FLOAT?) :: (FLOAT?)"                                                                                                                         | "Returns the largest floating point number that is less than or equal to a number and equal to a mathematical integer."                                         | false       |
| "haversin"                                          | "haversin(input :: FLOAT?) :: (FLOAT?)"                                                                                                                      | "Returns half the versine of a number."                                                                                                                         | false       |
| "head"                                              | "head(list :: LIST? OF ANY?) :: (ANY?)"                                                                                                                      | "Returns the first element in a list."                                                                                                                          | false       |
| "id"                                                | "id(input :: NODE?) :: (INTEGER?)"                                                                                                                           | "Returns the id of a node."                                                                                                                                     | false       |
| "id"                                                | "id(input :: RELATIONSHIP?) :: (INTEGER?)"                                                                                                                   | "Returns the id of a relationship."                                                                                                                             | false       |
| "keys"                                              | "keys(input :: NODE?) :: (LIST? OF STRING?)"                                                                                                                 | "Returns a list containing the string representations for all the property names of a node."                                                                    | false       |
| "keys"                                              | "keys(input :: RELATIONSHIP?) :: (LIST? OF STRING?)"                                                                                                         | "Returns a list containing the string representations for all the property names of a relationship"                                                             | false       |
| "keys"                                              | "keys(input :: MAP?) :: (LIST? OF STRING?)"                                                                                                                  | "Returns a list containing the string representations for all the property names of a map."                                                                     | false       |
| "labels"                                            | "labels(input :: NODE?) :: (LIST? OF STRING?)"                                                                                                               | "Returns a list containing the string representations for all the labels of a node."                                                                            | false       |
| "last"                                              | "last(list :: LIST? OF ANY?) :: (ANY?)"                                                                                                                      | "Returns the last element in a list."                                                                                                                           | false       |
| "left"                                              | "left(original :: STRING?, length :: INTEGER?) :: (STRING?)"                                                                                                 | "Returns a string containing the specified number of leftmost characters of the original string."                                                               | false       |
| "length"                                            | "length(input :: PATH?) :: (INTEGER?)"                                                                                                                       | "Returns the length of a path."                                                                                                                                 | false       |
| "linenumber"                                        | "linenumber() :: (INTEGER?)"                                                                                                                                 | "Returns the line number that LOAD CSV is currently using"                                                                                                      | false       |
| "localdatetime"                                     | "localdatetime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALDATETIME?)"                                                                               | "Create a LocalDateTime instant."                                                                                                                               | false       |
| "localdatetime.realtime"                            | "localdatetime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALDATETIME?)"                                                                   | "Get the current LocalDateTime instant using the realtime clock."                                                                                               | false       |
| "localdatetime.statement"                           | "localdatetime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALDATETIME?)"                                                                  | "Get the current LocalDateTime instant using the statement clock."                                                                                              | false       |
| "localdatetime.transaction"                         | "localdatetime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALDATETIME?)"                                                                | "Get the current LocalDateTime instant using the transaction clock."                                                                                            | false       |
| "localdatetime.truncate"                            | "localdatetime.truncate(unit :: STRING?, input :: ANY?, fields = null :: MAP?) :: (LOCALDATETIME?)"                                                          | "Truncate the input temporal value to a LocalDateTime instant using the specified unit."                                                                        | false       |
| "localtime"                                         | "localtime(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALTIME?)"                                                                                       | "Create a LocalTime instant."                                                                                                                                   | false       |
| "localtime.realtime"                                | "localtime.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALTIME?)"                                                                           | "Get the current LocalTime instant using the realtime clock."                                                                                                   | false       |
| "localtime.statement"                               | "localtime.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALTIME?)"                                                                          | "Get the current LocalTime instant using the statement clock."                                                                                                  | false       |
| "localtime.transaction"                             | "localtime.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (LOCALTIME?)"                                                                        | "Get the current LocalTime instant using the transaction clock."                                                                                                | false       |
| "localtime.truncate"                                | "localtime.truncate(unit :: STRING?, input :: ANY?, fields = null :: MAP?) :: (LOCALTIME?)"                                                                  | "Truncate the input temporal value to a LocalTime instant using the specified unit."                                                                            | false       |
| "log"                                               | "log(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the natural logarithm of a number."                                                                                                                    | false       |
| "log10"                                             | "log10(input :: FLOAT?) :: (FLOAT?)"                                                                                                                         | "Returns the common logarithm (base 10) of a number."                                                                                                           | false       |
| "ltrim"                                             | "ltrim(input :: STRING?) :: (STRING?)"                                                                                                                       | "Returns the original string with leading whitespace removed."                                                                                                  | false       |
| "max"                                               | "max(input :: ANY?) :: (ANY?)"                                                                                                                               | "Returns the maximum value in a set of values."                                                                                                                 | true        |
| "min"                                               | "min(input :: ANY?) :: (ANY?)"                                                                                                                               | "Returns the minimum value in a set of values."                                                                                                                 | true        |
| "nodes"                                             | "nodes(input :: PATH?) :: (LIST? OF NODE?)"                                                                                                                  | "Returns a list containing all the nodes in a path."                                                                                                            | false       |
| "org.neo4j.procedure.avgDoubleList"                 | "org.neo4j.procedure.avgDoubleList(someValue :: LIST? OF FLOAT?) :: (FLOAT?)"                                                                                | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.avgNumberList"                 | "org.neo4j.procedure.avgNumberList(someValue :: LIST? OF NUMBER?) :: (FLOAT?)"                                                                               | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.defaultValues"                 | "org.neo4j.procedure.defaultValues(string = a string :: STRING?, integer = 42 :: INTEGER?, float = 3.14 :: FLOAT?, boolean = true :: BOOLEAN?) :: (STRING?)" | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.delegatingFunction"            | "org.neo4j.procedure.delegatingFunction(someValue :: INTEGER?) :: (INTEGER?)"                                                                                | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.genericArguments"              | "org.neo4j.procedure.genericArguments(strings :: LIST? OF LIST? OF STRING?, longs :: LIST? OF LIST? OF LIST? OF INTEGER?) :: (INTEGER?)"                     | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.indexOutOfBounds"              | "org.neo4j.procedure.indexOutOfBounds() :: (INTEGER?)"                                                                                                       | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.integrationTestMe"             | "org.neo4j.procedure.integrationTestMe() :: (INTEGER?)"                                                                                                      | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.listCoolPeopleInDatabase"      | "org.neo4j.procedure.listCoolPeopleInDatabase() :: (LIST? OF ANY?)"                                                                                          | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.logAround"                     | "org.neo4j.procedure.logAround() :: (INTEGER?)"                                                                                                              | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.mapArgument"                   | "org.neo4j.procedure.mapArgument(map :: MAP?) :: (INTEGER?)"                                                                                                 | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.node"                          | "org.neo4j.procedure.node(id :: INTEGER?) :: (NODE?)"                                                                                                        | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.nodeListArgument"              | "org.neo4j.procedure.nodeListArgument(nodes :: LIST? OF NODE?) :: (INTEGER?)"                                                                                | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.nodePaths"                     | "org.neo4j.procedure.nodePaths(someValue :: NODE?) :: (PATH?)"                                                                                               | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.nodeWithDescription"           | "org.neo4j.procedure.nodeWithDescription(someValue :: NODE?) :: (NODE?)"                                                                                     | "This is a description"                                                                                                                                         | false       |
| "org.neo4j.procedure.readOnlyCallingWriteFunction"  | "org.neo4j.procedure.readOnlyCallingWriteFunction() :: (NODE?)"                                                                                              | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.readOnlyCallingWriteProcedure" | "org.neo4j.procedure.readOnlyCallingWriteProcedure() :: (INTEGER?)"                                                                                          | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.readOnlyTryingToWrite"         | "org.neo4j.procedure.readOnlyTryingToWrite() :: (NODE?)"                                                                                                     | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.readOnlyTryingToWriteSchema"   | "org.neo4j.procedure.readOnlyTryingToWriteSchema() :: (STRING?)"                                                                                             | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.recursiveSum"                  | "org.neo4j.procedure.recursiveSum(someValue :: INTEGER?) :: (INTEGER?)"                                                                                      | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.shutdown"                      | "org.neo4j.procedure.shutdown() :: (STRING?)"                                                                                                                | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.simpleArgument"                | "org.neo4j.procedure.simpleArgument(someValue :: INTEGER?) :: (INTEGER?)"                                                                                    | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.squareDouble"                  | "org.neo4j.procedure.squareDouble(someValue :: FLOAT?) :: (FLOAT?)"                                                                                          | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.squareLong"                    | "org.neo4j.procedure.squareLong(someValue :: INTEGER?) :: (INTEGER?)"                                                                                        | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.throwsExceptionInStream"       | "org.neo4j.procedure.throwsExceptionInStream() :: (INTEGER?)"                                                                                                | ""                                                                                                                                                              | false       |
| "org.neo4j.procedure.unsupportedFunction"           | "org.neo4j.procedure.unsupportedFunction() :: (STRING?)"                                                                                                     | ""                                                                                                                                                              | false       |
| "percentileCont"                                    | "percentilecont(input :: FLOAT?, percentile :: FLOAT?) :: (FLOAT?)"                                                                                          | "Returns the percentile of a value over a group using linear interpolation."                                                                                    | true        |
| "percentileDisc"                                    | "percentiledisc(input :: INTEGER?, percentile :: FLOAT?) :: (INTEGER?)"                                                                                      | "Returns the nearest value to the given percentile over a group using a rounding method."                                                                       | true        |
| "percentileDisc"                                    | "percentiledisc(input :: FLOAT?, percentile :: FLOAT?) :: (FLOAT?)"                                                                                          | "Returns the nearest value to the given percentile over a group using a rounding method."                                                                       | true        |
| "pi"                                                | "pi() :: (FLOAT?)"                                                                                                                                           | "Returns the mathematical constant pi."                                                                                                                         | false       |
| "point"                                             | "point(input :: MAP?) :: (POINT?)"                                                                                                                           | "Returns a 2D or 3D point object, given two or respectively three coordinate values in the Cartesian coordinate system or WGS 84 geographic coordinate system." | false       |
| "properties"                                        | "properties(input :: NODE?) :: (MAP?)"                                                                                                                       | "Returns a map containing all the properties of a node."                                                                                                        | false       |
| "properties"                                        | "properties(input :: RELATIONSHIP?) :: (MAP?)"                                                                                                               | "Returns a map containing all the properties of a relationship."                                                                                                | false       |
| "properties"                                        | "properties(input :: MAP?) :: (MAP?)"                                                                                                                        | "Returns a map containing all the properties of a map."                                                                                                         | false       |
| "radians"                                           | "radians(input :: FLOAT?) :: (FLOAT?)"                                                                                                                       | "Converts degrees to radians."                                                                                                                                  | false       |
| "rand"                                              | "rand() :: (FLOAT?)"                                                                                                                                         | "Returns a random floating point number in the range from 0 (inclusive) to 1 (exclusive); i.e. [0,1)."                                                          | false       |
| "randomUUID"                                        | "randomUUID() :: (STRING?)"                                                                                                                                  | "Generates a random UUID."                                                                                                                                      | false       |
| "range"                                             | "range(start :: INTEGER?, end :: INTEGER?) :: (LIST? OF INTEGER?)"                                                                                           | "Returns a list comprising all integer values within a specified range."                                                                                        | false       |
| "range"                                             | "range(start :: INTEGER?, end :: INTEGER?, step :: INTEGER?) :: (LIST? OF INTEGER?)"                                                                         | "Returns a list comprising all integer values within a specified range created with optional step length."                                                      | false       |
| "reduce"                                            | "reduce(accumulator :: VARIABLE = initial :: ANY?, variable :: VARIABLE IN list :: LIST OF ANY? | expression :: ANY) :: (ANY?)"                              | "Runs an expression against individual elements of a list, storing the result of the expression in an accumulator."                                             | false       |
| "relationships"                                     | "relationships(input :: PATH?) :: (LIST? OF RELATIONSHIP?)"                                                                                                  | "Returns a list containing all the relationships in a path."                                                                                                    | false       |
| "replace"                                           | "replace(original :: STRING?, search :: STRING?, replace :: STRING?) :: (STRING?)"                                                                           | "Returns a string in which all occurrences of a specified string in the original string have been replaced by another (specified) string."                      | false       |
| "reverse"                                           | "reverse(input :: STRING?) :: (STRING?)"                                                                                                                     | "Returns a string in which the order of all characters in the original string have been reversed."                                                              | false       |
| "reverse"                                           | "reverse(input :: LIST? OF ANY?) :: (LIST? OF ANY?)"                                                                                                         | "Returns a list in which the order of all elements in the original list have been reversed."                                                                    | false       |
| "right"                                             | "right(original :: STRING?, length :: INTEGER?) :: (STRING?)"                                                                                                | "Returns a string containing the specified number of rightmost characters of the original string."                                                              | false       |
| "round"                                             | "round(input :: FLOAT?) :: (FLOAT?)"                                                                                                                         | "Returns the value of a number rounded to the nearest integer."                                                                                                 | false       |
| "rtrim"                                             | "rtrim(input :: STRING?) :: (STRING?)"                                                                                                                       | "Returns the original string with trailing whitespace removed."                                                                                                 | false       |
| "sign"                                              | "sign(input :: INTEGER?) :: (INTEGER?)"                                                                                                                      | "Returns the signum of a number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number."                                              | false       |
| "sign"                                              | "sign(input :: FLOAT?) :: (INTEGER?)"                                                                                                                        | "Returns the signum of a number: 0 if the number is 0, -1 for any negative number, and 1 for any positive number."                                              | false       |
| "sin"                                               | "sin(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the sine of a number."                                                                                                                                 | false       |
| "size"                                              | "size(input :: LIST? OF ANY?) :: (INTEGER?)"                                                                                                                 | "Returns the number of items in a list."                                                                                                                        | false       |
| "size"                                              | "size(input :: STRING?) :: (INTEGER?)"                                                                                                                       | "Returns the number of Unicode characters in a string."                                                                                                         | false       |
| "split"                                             | "split(original :: STRING?, splitDelimiter :: STRING?) :: (LIST? OF STRING?)"                                                                                | "Returns a list of strings resulting from the splitting of the original string around matches of the given delimiter."                                          | false       |
| "sqrt"                                              | "sqrt(input :: FLOAT?) :: (FLOAT?)"                                                                                                                          | "Returns the square root of a number."                                                                                                                          | false       |
| "startNode"                                         | "startnode(input :: RELATIONSHIP?) :: (NODE?)"                                                                                                               | "Returns the start node of a relationship."                                                                                                                     | false       |
| "stdev"                                             | "stdev(input :: FLOAT?) :: (FLOAT?)"                                                                                                                         | "Returns the standard deviation for the given value over a group for a sample of a population."                                                                 | true        |
| "stdevp"                                            | "stdevp(input :: FLOAT?) :: (FLOAT?)"                                                                                                                        | "Returns the standard deviation for the given value over a group for an entire population."                                                                     | true        |
| "substring"                                         | "substring(original :: STRING?, start :: INTEGER?) :: (STRING?)"                                                                                             | "Returns a substring of the original string, beginning with a 0-based index start."                                                                             | false       |
| "substring"                                         | "substring(original :: STRING?, start :: INTEGER?, length :: INTEGER?) :: (STRING?)"                                                                         | "Returns a substring of the original string, beginning with a 0-based index start and length."                                                                  | false       |
| "sum"                                               | "sum(input :: INTEGER?) :: (INTEGER?)"                                                                                                                       | "Returns the sum of a set of integers"                                                                                                                          | true        |
| "sum"                                               | "sum(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the sum of a set of floats"                                                                                                                            | true        |
| "sum"                                               | "sum(input :: DURATION?) :: (DURATION?)"                                                                                                                     | "Returns the sum of a set of durations"                                                                                                                         | true        |
| "tail"                                              | "tail(input :: LIST? OF ANY?) :: (LIST? OF ANY?)"                                                                                                            | "Returns all but the first element in a list."                                                                                                                  | false       |
| "tan"                                               | "tan(input :: FLOAT?) :: (FLOAT?)"                                                                                                                           | "Returns the tangent of a number."                                                                                                                              | false       |
| "this.is.test.only.sum"                             | "this.is.test.only.sum(numbers :: LIST? OF NUMBER?) :: (NUMBER?)"                                                                                            | ""                                                                                                                                                              | false       |
| "time"                                              | "time(input = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (TIME?)"                                                                                                 | "Create a Time instant."                                                                                                                                        | false       |
| "time.realtime"                                     | "time.realtime(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (TIME?)"                                                                                     | "Get the current Time instant using the realtime clock."                                                                                                        | false       |
| "time.statement"                                    | "time.statement(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (TIME?)"                                                                                    | "Get the current Time instant using the statement clock."                                                                                                       | false       |
| "time.transaction"                                  | "time.transaction(timezone = DEFAULT_TEMPORAL_ARGUMENT :: ANY?) :: (TIME?)"                                                                                  | "Get the current Time instant using the transaction clock."                                                                                                     | false       |
| "time.truncate"                                     | "time.truncate(unit :: STRING?, input :: ANY?, fields = null :: MAP?) :: (TIME?)"                                                                            | "Truncate the input temporal value to a Time instant using the specified unit."                                                                                 | false       |
| "toBoolean"                                         | "toBoolean(input :: ANY?) :: (BOOLEAN?)"                                                                                                                     | "Converts a string value to a boolean value."                                                                                                                   | false       |
| "toFloat"                                           | "tofloat(input :: STRING?) :: (FLOAT?)"                                                                                                                      | "Converts a string value to a floating point value."                                                                                                            | false       |
| "toFloat"                                           | "tofloat(input :: NUMBER?) :: (FLOAT?)"                                                                                                                      | "Converts an integer value to a floating point value."                                                                                                          | false       |
| "toInteger"                                         | "tointeger(input :: STRING?) :: (INTEGER?)"                                                                                                                  | "Converts a string value to an integer value."                                                                                                                  | false       |
| "toInteger"                                         | "tointeger(input :: NUMBER?) :: (INTEGER?)"                                                                                                                  | "Converts a floating point value to an integer value."                                                                                                          | false       |
| "toLower"                                           | "tolower(input :: STRING?) :: (STRING?)"                                                                                                                     | "Returns the original string in lowercase."                                                                                                                     | false       |
| "toString"                                          | "toString(input :: ANY?) :: (STRING?)"                                                                                                                       | "Converts an integer, float, boolean or temporal type (i.e. Date, Time, LocalTime, DateTime, LocalDateTime or Duration) value to a string."                     | false       |
| "toUpper"                                           | "toupper(input :: STRING?) :: (STRING?)"                                                                                                                     | "Returns the original string in uppercase."                                                                                                                     | false       |
| "trim"                                              | "trim(input :: STRING?) :: (STRING?)"                                                                                                                        | "Returns the original string with leading and trailing whitespace removed."                                                                                     | false       |
| "type"                                              | "type(input :: RELATIONSHIP?) :: (STRING?)"                                                                                                                  | "Returns the string representation of the relationship type."                                                                                                   | false       |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
147 rows

