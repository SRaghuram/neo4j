// Unique
CONSTRAINT ON ( annotation:Annotation ) ASSERT annotation.event_id IS UNIQUE
CONSTRAINT ON ( benchmarktool:BenchmarkTool ) ASSERT benchmarktool.name IS UNIQUE
CONSTRAINT ON ( plantree:PlanTree ) ASSERT plantree.description_hash IS UNIQUE
CONSTRAINT ON ( testrun:TestRun ) ASSERT testrun.archive IS UNIQUE
CONSTRAINT ON ( testrun:TestRun ) ASSERT testrun.id IS UNIQUE
CONSTRAINT ON ( testrun:TestRun ) ASSERT testrun.jobId IS UNIQUE
// Exists
CONSTRAINT ON ( annotation:Annotation ) ASSERT exists(annotation.author)
CONSTRAINT ON ( annotation:Annotation ) ASSERT exists(annotation.comment)
CONSTRAINT ON ( annotation:Annotation ) ASSERT exists(annotation.date)
CONSTRAINT ON ( annotation:Annotation ) ASSERT exists(annotation.event_id)
CONSTRAINT ON ( benchmark:Benchmark ) ASSERT exists(benchmark.description)
CONSTRAINT ON ( benchmark:Benchmark ) ASSERT exists(benchmark.mode)
CONSTRAINT ON ( benchmark:Benchmark ) ASSERT exists(benchmark.name)
CONSTRAINT ON ( benchmark:Benchmark ) ASSERT exists(benchmark.simple_name)
CONSTRAINT ON ( benchmarkgroup:BenchmarkGroup ) ASSERT exists(benchmarkgroup.name)
CONSTRAINT ON ( benchmarktool:BenchmarkTool ) ASSERT exists(benchmarktool.name)
CONSTRAINT ON ( benchmarktool:BenchmarkTool ) ASSERT exists(benchmarktool.repository_name)
CONSTRAINT ON ( benchmarktoolversion:BenchmarkToolVersion ) ASSERT exists(benchmarktoolversion.branch)
CONSTRAINT ON ( benchmarktoolversion:BenchmarkToolVersion ) ASSERT exists(benchmarktoolversion.commit)
CONSTRAINT ON ( benchmarktoolversion:BenchmarkToolVersion ) ASSERT exists(benchmarktoolversion.owner)
CONSTRAINT ON ( environment:Environment ) ASSERT exists(environment.operating_system)
CONSTRAINT ON ( environment:Environment ) ASSERT exists(environment.server)
CONSTRAINT ON ( java:Java ) ASSERT exists(java.args)
CONSTRAINT ON ( java:Java ) ASSERT exists(java.jvm)
CONSTRAINT ON ( java:Java ) ASSERT exists(java.version)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.unit)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.max)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.mean)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.min)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_25)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_50)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_75)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_90)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_95)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_99)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.perc_99_9)
CONSTRAINT ON ( metrics:Metrics ) ASSERT exists(metrics.sample_size)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.unit)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.max)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.mean)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.min)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_25)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_50)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_75)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_90)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_95)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_99)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.perc_99_9)
CONSTRAINT ON ( auxiliaryMetrics:AuxiliaryMetrics ) ASSERT exists(auxiliaryMetrics.sample_size)
CONSTRAINT ON ( operator:Operator ) ASSERT exists(operator.db_hits)
CONSTRAINT ON ( operator:Operator ) ASSERT exists(operator.operator_type)
CONSTRAINT ON ( operator:Operator ) ASSERT exists(operator.rows)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.cypher_version)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.default_planner)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.default_runtime)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.requested_planner)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.requested_runtime)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.used_planner)
CONSTRAINT ON ( plan:Plan ) ASSERT exists(plan.used_runtime)
CONSTRAINT ON ( plantree:PlanTree ) ASSERT exists(plantree.description)
CONSTRAINT ON ( plantree:PlanTree ) ASSERT exists(plantree.description_hash)
CONSTRAINT ON ( project:Project ) ASSERT exists(project.branch)
CONSTRAINT ON ( project:Project ) ASSERT exists(project.commit)
CONSTRAINT ON ( project:Project ) ASSERT exists(project.name)
CONSTRAINT ON ( project:Project ) ASSERT exists(project.owner)
CONSTRAINT ON ( project:Project ) ASSERT exists(project.version)
CONSTRAINT ON ( testrun:TestRun ) ASSERT exists(testrun.date)
CONSTRAINT ON ( testrun:TestRun ) ASSERT exists(testrun.duration)
CONSTRAINT ON ( testrun:TestRun ) ASSERT exists(testrun.id)
CONSTRAINT ON ( testrun:TestRun ) ASSERT exists(testrun.triggered_by)
// Index
INDEX ON :Annotation(author)
INDEX ON :Annotation(comment)
INDEX ON :Annotation(date)
INDEX ON :Benchmark(mode)
INDEX ON :Benchmark(name)
INDEX ON :Benchmark(simple_name)
INDEX ON :BenchmarkGroup(name)
INDEX ON :BenchmarkTool(repository_name)
INDEX ON :BenchmarkToolVersion(branch)
INDEX ON :BenchmarkToolVersion(commit)
INDEX ON :BenchmarkToolVersion(owner)
INDEX ON :Environment(operating_system)
INDEX ON :Environment(server)
INDEX ON :Java(jvm)
INDEX ON :Java(version)
INDEX ON :Operator(operator_type)
INDEX ON :Plan(cypher_version)
INDEX ON :Plan(default_planner)
INDEX ON :Plan(default_runtime)
INDEX ON :Plan(requested_planner)
INDEX ON :Plan(requested_runtime)
INDEX ON :Plan(used_planner)
INDEX ON :Plan(used_runtime)
INDEX ON :Project(branch)
INDEX ON :Project(commit)
INDEX ON :Project(edition)
INDEX ON :Project(name)
INDEX ON :Project(owner)
INDEX ON :Project(version)
INDEX ON :TestRun(build)
INDEX ON :TestRun(date)
INDEX ON :TestRun(duration)
INDEX ON :TestRun(parent_build)
