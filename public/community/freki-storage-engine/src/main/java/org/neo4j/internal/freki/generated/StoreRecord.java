// automatically generated by the FlatBuffers compiler, do not modify

package org.neo4j.internal.freki.generated;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class StoreRecord extends Table {
  public static StoreRecord getRootAsStoreRecord(ByteBuffer _bb) { return getRootAsStoreRecord(_bb, new StoreRecord()); }
  public static StoreRecord getRootAsStoreRecord(ByteBuffer _bb, StoreRecord obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public StoreRecord __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean inUse() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int labels(int j) { int o = __offset(6); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int labelsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer labelsAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer labelsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }
  public Property properties(int j) { return properties(new Property(), j); }
  public Property properties(Property obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Relationship relationships(int j) { return relationships(new Relationship(), j); }
  public Relationship relationships(Relationship obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int relationshipsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createStoreRecord(FlatBufferBuilder builder,
      boolean inUse,
      int labelsOffset,
      int propertiesOffset,
      int relationshipsOffset) {
    builder.startObject(4);
    StoreRecord.addRelationships(builder, relationshipsOffset);
    StoreRecord.addProperties(builder, propertiesOffset);
    StoreRecord.addLabels(builder, labelsOffset);
    StoreRecord.addInUse(builder, inUse);
    return StoreRecord.endStoreRecord(builder);
  }

  public static void startStoreRecord(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addInUse(FlatBufferBuilder builder, boolean inUse) { builder.addBoolean(0, inUse, false); }
  public static void addLabels(FlatBufferBuilder builder, int labelsOffset) { builder.addOffset(1, labelsOffset, 0); }
  public static int createLabelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startLabelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(2, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRelationships(FlatBufferBuilder builder, int relationshipsOffset) { builder.addOffset(3, relationshipsOffset, 0); }
  public static int createRelationshipsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRelationshipsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endStoreRecord(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishStoreRecordBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedStoreRecordBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

