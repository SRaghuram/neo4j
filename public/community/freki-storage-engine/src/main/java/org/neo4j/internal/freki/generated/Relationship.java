// automatically generated by the FlatBuffers compiler, do not modify

package org.neo4j.internal.freki.generated;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Relationship extends Table {
  public static Relationship getRootAsRelationship(ByteBuffer _bb) { return getRootAsRelationship(_bb, new Relationship()); }
  public static Relationship getRootAsRelationship(ByteBuffer _bb, Relationship obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Relationship __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long otherNode() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int type() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean outgoing() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public Property property(int j) { return property(new Property(), j); }
  public Property property(Property obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertyLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createRelationship(FlatBufferBuilder builder,
      long otherNode,
      int type,
      boolean outgoing,
      int propertyOffset) {
    builder.startObject(4);
    Relationship.addOtherNode(builder, otherNode);
    Relationship.addProperty(builder, propertyOffset);
    Relationship.addType(builder, type);
    Relationship.addOutgoing(builder, outgoing);
    return Relationship.endRelationship(builder);
  }

  public static void startRelationship(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addOtherNode(FlatBufferBuilder builder, long otherNode) { builder.addLong(0, otherNode, 0L); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addInt(1, type, 0); }
  public static void addOutgoing(FlatBufferBuilder builder, boolean outgoing) { builder.addBoolean(2, outgoing, false); }
  public static void addProperty(FlatBufferBuilder builder, int propertyOffset) { builder.addOffset(3, propertyOffset, 0); }
  public static int createPropertyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRelationship(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

